rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ================= Helpers =================
    function isSignedIn() {
      return request.auth != null;
    }
    function pollDoc(pollId) {
      return get(/databases/$(database)/documents/polls/$(pollId));
    }
    function isOwner(pollId) {
      return isSignedIn() && pollDoc(pollId).data.createdBy == request.auth.uid;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
    // A poll is open if it has no dueAt OR now < dueAt
    function pollOpen(pollId) {
      let p = pollDoc(pollId);
      return !('dueAt' in p.data) || request.time < p.data.dueAt;
    }
    function isPollAdmin(pollId) {
      let p = pollDoc(pollId);
      let ownerOrGlobal = isAdmin() || (isSignedIn() && p.data.createdBy == request.auth.uid);
      let arrayListed = ('admins' in p.data) && p.data.admins.hasAny([request.auth.uid]);
      let mapListed = ('adminsMap' in p.data) && (request.auth.uid in p.data.adminsMap);
      return ownerOrGlobal || arrayListed || mapListed;
    }
    // A user has “submitted” for this poll if their status doc exists
    function hasSubmitted(pollId, uid) {
      let sid = pollId + "__" + uid + "__status";   // build the doc id first
      return isSignedIn() &&
             exists(/databases/$(database)/documents/submissions/$(sid));
    }

    // ================= Polls ==================
    match /polls/{pollId} {
      allow read: if true;
      allow create: if isSignedIn();

      // Owner can update (cannot change dueDate/dueAt once set)
      allow update: if isOwner(pollId)
                    && (!('dueDate' in request.resource.data) || request.resource.data.dueDate == resource.data.dueDate)
                    && (!('dueAt'   in request.resource.data) || request.resource.data.dueAt   == resource.data.dueAt);

      // Questions subcollection
      match /questions/{questionId} {
        allow read: if true;
        allow create, update, delete: if isOwner(pollId) && pollOpen(pollId);
      }

      // Read-only H3 aggregates per resolution (explicit segments; wildcards can't be partial)
      match /h3Agg_r7/{h3} {
        allow read: if isSignedIn() && (isPollAdmin(pollId) || hasSubmitted(pollId, request.auth.uid));
        allow write: if false;
      }
      match /h3Agg_r8/{h3} {
        allow read: if isSignedIn() && (isPollAdmin(pollId) || hasSubmitted(pollId, request.auth.uid));
        allow write: if false;
      }
      match /h3Agg_r9/{h3} {
        allow read: if isSignedIn() && (isPollAdmin(pollId) || hasSubmitted(pollId, request.auth.uid));
        allow write: if false;
      }
    }

    // ================= Submissions ==================
    match /submissions/{id} {
      allow read: if isSignedIn() &&
                  (resource.data.userId == request.auth.uid || isPollAdmin(resource.data.pollId));

      // Simplified rules for debugging
      allow create, update: if isSignedIn()
        && request.resource.data.userId == request.auth.uid
        && ('pollId' in request.resource.data);

      allow delete: if false;
    }

    // ================= Profiles ==================
    match /profiles/{uid} {
      // Owner only
      allow read: if isSignedIn() && request.auth.uid == uid;

      // Clients cannot set server-managed geo fields
      allow create, update: if isSignedIn()
        && request.auth.uid == uid
        && !('geo' in request.resource.data)
        && !('lat' in request.resource.data)
        && !('lng' in request.resource.data)
        && !('h3' in request.resource.data);
    }

    // ================= Feedback (unchanged) ==================
    function ratePath(uid) {
      return /databases/$(database)/documents/feedback_ratelimits/$(uid);
    }

    match /feedback/{id} {
      allow create: if isSignedIn() && existsAfter(ratePath(request.auth.uid));
      allow read: if isAdmin();
      allow update, delete: if false;
    }

    match /feedback_ratelimits/{uid} {
      allow read: if false;
      allow create, update: if isSignedIn()
        && request.auth.uid == uid
        && (
             !exists(ratePath(uid))
             || !('lastAt' in get(ratePath(uid)).data)
             || request.time > get(ratePath(uid)).data.lastAt + duration.value(30, 's')
           );
      allow delete: if false;
    }

    // ================= Contact Requests (unchanged) ==================
    match /contactRequests/{docId} {
      allow create: if request.resource.data.keys().hasAll([
          'fullName','email','subject','createdAt','status','source','subjectKey'
        ])
        && request.resource.data.fullName is string
        && request.resource.data.email is string
        && request.resource.data.subject is string
        && request.resource.data.status == 'new'
        && request.resource.data.source == 'pricing'
        && request.resource.data.subjectKey in ['sales','pilot','general']
        && request.resource.data.createdAt == request.time;
      allow read: if isAdmin();
      allow update, delete: if false;
    }
  }
}
